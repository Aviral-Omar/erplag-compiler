program => moduleDeclarations otherModules driverModule otherModules
moduleDeclarations => moduleDeclaration moduleDeclarations
moduleDeclarations => epsilon
moduleDeclaration => DECLARE MODULE ID SEMICOL
otherModules => module otherModules
otherModules => epsilon
driverModule => DRIVERDEF DRIVER PROGRAM DRIVERENDDEF moduleDef
module => DEF MODULE ID ENDDEF TAKES INPUT SQBO inputPlist SQBC SEMICOL ret moduleDef
ret => RETURNS SQBO outputPlist SQBC SEMICOL
ret => epsilon
inputPlist => ID COLON dataType iPList2
iPList2 => COMMA ID COLON dataType iPList2
iPList2 => epsilon
outputPlist => ID COLON type oPList2
oPList2 => COMMA ID COLON type oPList2
oPList2 => epsilon
dataType => INTEGER
dataType => REAL
dataType => BOOLEAN
dataType => ARRAY SQBO arrRange SQBC OF type
arrRange => signedIndex RANGEOP signedIndex
type => INTEGER
type => REAL
type => BOOLEAN
moduleDef => START statements END
statements => statement statements
statements => epsilon
statement => ioStmt
statement => simpleStmt
statement => declareStmt
statement => conditionalStmt
statement => iterativeStmt
ioStmt => GET_VALUE BO ID BC SEMICOL
ioStmt => PRINT BO varPrint BC SEMICOL
varPrint => ID arrIndex
varPrint => NUM
varPrint => RNUM
varPrint => boolConst
boolConst => TRUE
boolConst => FALSE
arrIndex => SQBO signedIndex SQBC
arrIndex => epsilon
simpleStmt => moduleReuseStmt
simpleStmt => assignmentStmt
assignmentStmt => ID whichStmt
whichStmt => lvalueIDStmt
whichStmt => lvalueARRStmt
lvalueIDStmt => ASSIGNOP expression SEMICOL
lvalueARRStmt => SQBO indexWithExpressions SQBC ASSIGNOP expression SEMICOL
signedIndex => sign index
index => NUM
index => ID
sign => PLUS
sign => MINUS
sign => epsilon
moduleReuseStmt => optional USE MODULE ID WITH PARAMETERS actualPList SEMICOL
actualPList => sign param actualPList2
actualPList2 => COMMA sign param actualPList2
actualPList2 => epsilon
param => NUM
param => RNUM
param => boolConst
param => ID arrIndexWithExpressions
optional => SQBO idList SQBC ASSIGNOP
optional => epsilon
idList => ID idList2
idList2 => COMMA ID idList2
idList2 => epsilon
expression => arithmeticOrLogicalExpr
expression => unaryOpExpr
unaryOpExpr => unaryOp unsignedArithExpr
unsignedArithExpr => BO arithmeticExpr BC
unsignedArithExpr => varIDNum
unaryOp => PLUS
unaryOp => MINUS
varIDNum => ID
varIDNum => NUM
varIDNum => RNUM
arithmeticOrLogicalExpr => anyTerm logicalOpExpr
logicalOpExpr => logicalOp anyTerm logicalOpExpr
logicalOpExpr => epsilon
anyTerm => arithmeticExpr relationOpExpr
relationOpExpr => relationalOp arithmeticExpr
relationOpExpr => epsilon
arithmeticExpr => term plusMinusExpr
plusMinusExpr => operator1 term plusMinusExpr
plusMinusExpr => epsilon
term => factor mulDivExpr
mulDivExpr => operator2 factor mulDivExpr
mulDivExpr => epsilon
factor => BO arithmeticOrLogicalExpr BC
factor => NUM
factor => RNUM
factor => boolConst
factor => ID arrIndexWithExpressions
arrIndexWithExpressions => SQBO indexWithExpressions SQBC
arrIndexWithExpressions => epsilon
indexWithExpressions => sign arrExpr
arrExpr => arrTerm arrPlusMinusExpr
arrPlusMinusExpr => operator1 arrTerm arrPlusMinusExpr
arrPlusMinusExpr => epsilon
arrTerm => arrFactor arrMulDivExpr
arrMulDivExpr => operator2 arrFactor arrMulDivExpr
arrMulDivExpr => epsilon
arrFactor => ID
arrFactor => NUM
arrFactor => boolConst
arrFactor => BO arrExpr BC
operator1 => PLUS
operator1 => MINUS
operator2 => MUL
operator2 => DIV
logicalOp => AND
logicalOp => OR
relationalOp => LT
relationalOp => LE
relationalOp => GT
relationalOp => GE
relationalOp => EQ
relationalOp => NE
declareStmt => DECLARE idList COLON dataType SEMICOL
conditionalStmt => SWITCH BO ID BC START caseStmts defaultCase END
caseStmts => CASE caseValue COLON statements BREAK SEMICOL caseStmts2
caseStmts2 => CASE caseValue COLON statements BREAK SEMICOL caseStmts2
caseStmts2 => epsilon
caseValue => NUM
caseValue => boolConst
defaultCase => DEFAULT COLON statements BREAK SEMICOL
defaultCase => epsilon
iterativeStmt => FOR BO ID IN forLoopRange BC START statements END
iterativeStmt => WHILE BO arithmeticOrLogicalExpr BC START statements END
forLoopRange => forLoopIndex RANGEOP forLoopIndex
forLoopIndex => sign NUM
